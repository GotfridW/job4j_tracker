Анализ работы приложения проводился с помощью jmap и jconsole. 
* При установленных параметрах -Xmx4m/8m, -Xms4m создание 100000 объектов вызывает OutOfMemoryError: Java heap space,
что говорит о выходе за пределы памяти heap, выделенному куче. Впоследствии установлен размер кучи 40/20.

jmap

По показаниям jmap видно, что при запуске программы создаётся около 700 групп объектов различных классов с общим
объемом памяти около 2.2Mb, в том числе единичные экземпляры всех используемых классов меню Трэкера. После создания
100к объектов Item видно, что в списке бОльшую часть составляют экземпляры Item и связанные с ними экземпляры String
и LocalDate/Time/DateTime. В тоже время наблюдается снижение числа отображаемых групп объектов до ~600 позиций.
После выполнения метода DeleteAllItems, объекты по-прежнему отображаются в списке, что говорит о том, что Garbage
Collector не удаляет мусор сразу, а по мере заполнения памяти.

Jconsole

При запуске jconsole прежде всего наблюдается увеличение используемой памяти (самим jconsole) и последующая малая
сборка мусора. При этом наблюдается перемещение части объектов из Survivor в Old space (~2Мб). Далее, в Эдеме
наблюдается ступенчатый график увеличения используемой памяти с систематическими сборками мусора по достижении лимита
выделенной памяти, при этом лимит незначительно увеличивается.
При добавлении 100к объектов Item происходит малая сборка и одновременно с этим наблюдается увеличение занимаемой
памяти в old space на ~18Мб, а в Эдеме значительно (на ~70%) снижается лимит памяти и, соответственно, на данном этапе
малые сборки мусора происходят чаще. Всё это сопровождается краткосрочной нагрузкой ЦП на 5%.
При добавлении дополнительных 100к объектов Item также наблюдается небольшая нагрузка на ЦП – происходит малая сборка
мусора и одновременное заполнение old space на очередные ~18Мб, далее следует большая сборка мусора, освобождающая
небольшую часть пространства old. При этом наблюдаю интересную картину: в Эдеме полностью прекращается заполнение
памяти (график постоянно на нуле), активность GC остается только в survivor, при этом в Old space происходит очень
медленное заполнение памяти.
Удаление всех объектов Item вызывает нагрузку на ЦП на 25%, при этом пространство old заполняется почти полностью,
а затем происходит через короткие интервалы происходит несколько больших сборок мусора, освобождающих около 34Мб.
Выход за пределы памяти путем создания 300к объектов ожидаемо вызвал OutOfMemoryError: java heap space.
